# Core protocol for the Crypt Proliferation project, containing a single cell-based simulation and post-processing thereof

# The 'ontology' to use for referencing model variables
namespace cellbased = 'https://chaste.cs.ox.ac.uk/nss/cellbased/0.1#'
inputs {    # Protocol inputs
    num_boxes = 10       # The number of boxes to use in the location histogram
    crypt_height = 20    # The height of the crypt (in nominal cell diameters)
    end_time = 1100       # The simulation end time (hours)
    # The time at which the system is assumed to have reached quasi steady state (hours).
    # We ignore division events occurring before this point.
    steady_state_time = 100
}
# Import the standard library of post-processing operations, using a relative path.
# Functions from this library may then be used by prefixing their names with 'std:'.
import std = '../../../FunctionalCuration/src/proto/library/BasicLibrary.xml'
library {   # Define some extra utility functions
    def InBox(loc, boxLow, boxHigh) { return loc >= boxLow && loc < boxHigh }
    # Extend an array by copying it a given number of times along a newly added dimension
    Stretch = lambda array, length, dim: [array for dim$i in 0:length]
}
units {     # Units definitions for this protocol
    hours = 3600 second
    lengthUnits = 10 micro metre "Nominal cell diameters"
}
tasks {     # The raw simulations to perform
    # Just run the cell-based simulation as-is, setting a few parameters at the start
    simulation sim = oneStep {
        modifiers {
            at start set cellbased:end_time = end_time
            at start set cellbased:crypt_length = crypt_height
            at start set cellbased:cells_up = MathML:ceiling(crypt_height * 2 / MathML:root(3))
        }
    }
}
post-processing {
    box_size = crypt_height / num_boxes  # y coordinates start at zero
    box_lows = [i*box_size for i in 0:num_boxes]
    box_highs = [(i+1)*box_size for i in 0:num_boxes]
    centres = map(lambda a, b: (a+b)/2, box_lows, box_highs)
    # The main simulation output is the 2d array of division data, with 4 columns:
    # time, x, y, age.  We extract division y coordinates for events after the given time.
    locations = std:After(sim:divisions[1$2], sim:divisions[1$0], steady_state_time)
    num_divisions = locations.SHAPE[0]
    # Figure out which histogram box each cell division occurred in, and count them up
    locations_ext = Stretch(locations, num_boxes, 0)       # Make all the _ext arrays the same
    box_lows_ext = Stretch(box_lows, num_divisions, 1)     # shape: [num_boxes, num_divisions]
    box_highs_ext = Stretch(box_highs, num_divisions, 1)
    in_box_pattern = map(InBox, locations_ext, box_lows_ext, box_highs_ext)
    freqs = std:RemoveDim(std:Sum(in_box_pattern), 1)            # Shape [num_boxes]
    assert std:RemoveDim(std:Sum(freqs), 0) == num_divisions     # Sanity check
}
outputs {
    divisions = sim:divisions     "Raw division data"            # Shape [num_divisions, 4]
    freqs     units dimensionless "Number of divisions per box"  # Shape [num_boxes]
    centres   units lengthUnits   "Box centres"                  # Shape [num_boxes]
}
plots {
    plot 'Cell division locations' { freqs against centres }
}